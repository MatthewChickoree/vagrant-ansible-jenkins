---
# Hard-restart Jenkins
# Copy Job xml to be used in virtual machine
# Create jobs in jenkins instance
# run security script
- name: Restarting Jenkins NOW
  sudo: yes
  command: java -jar {{ jenkins.cli_dest }} -s http://localhost:8080 restart
  when: installed_plugins.changed
  register: hard_restart

- name: "{{ startup_delay_s | default(45) }}s delay while rebooting Jenkins"
  wait_for: port=8080 delay={{ startup_delay_s | default(45) }}
  when: hard_restart.changed

- name: list all jobs
  sudo: yes
  shell: java -jar {{ jenkins.cli_dest }} -s http://localhost:8080 list-jobs All
  register: existing_jobs

- name: list default jobs to be created
  sudo: yes
  shell: groovy {{ remote_tmp_folder }}/script/jobs.groovy -j '{{ remote_tmp_folder }}/jobs'
  register: default_jobs_list

- name: create default jobs
  sudo: yes
  shell: java -jar {{ jenkins.cli_dest }} -s http://localhost:8080 create-job {{ item }} < {{ remote_tmp_folder }}/jobs/{{ item }}.xml
  with_items: default_jobs_list.stdout_lines
  when: "existing_jobs.changed and default_jobs_list is defined and existing_jobs.stdout.find('{{ item }}') == -1"
  register: default_jobs_created

# Java pipeline
- include: jenkins-java-pipeline.yml
  when: "target_jenkins_env == 'java'"

# meanjs
- name: list mean jobs to be created
  sudo: yes
  shell: groovy {{ remote_tmp_folder }}/script/jobs.groovy -j '{{ remote_tmp_folder }}/jobs/mean_pipeline'
  when: "target_jenkins_env == 'mean'"
  register: mean_jobs_list

- name: create jobs for mean pipeline
  sudo: yes
  shell: java -jar {{ jenkins.cli_dest }} -s http://localhost:8080 create-job {{ item }} < {{ remote_tmp_folder }}/jobs/mean_pipeline/{{ item }}.xml
  with_items: mean_jobs_list.stdout_lines
  when: "existing_jobs.changed and mean_jobs_list is defined and existing_jobs.stdout.find('{{ item }}') == -1 and target_jenkins_env == 'mean'"
  register: mean_jobs_created

# Setup Security
- name: setup security
  sudo: yes
  shell: java -jar {{ jenkins.cli_dest }} -s http://localhost:8080 groovy {{ remote_tmp_folder }}/script/security.groovy  admins='{{ security.jenkins_admins }}' orgs='{{ security.github_orgNames }}' clientid='{{ security.github_clientId }}' clientsecret='{{ security.github_clientSecret }}'
  when: security.enable_security is defined and security.enable_security
  register: security_setup

- name: Results - Setup Jenkins Security
  debug: var=security_setup.stdout_lines
